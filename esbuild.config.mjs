import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import { path7za } from "7zip-bin";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

async function copy7zBin() {
	try {
		const outDir = process.cwd();
		const binDir = path.join(outDir, 'bin');
		await fs.promises.mkdir(binDir, { recursive: true });
		const exeName = process.platform === 'win32' ? '7za.exe' : '7za';
		const dest = path.join(binDir, exeName);
		await fs.promises.copyFile(path7za, dest);
		console.log(`[build] Copied 7z binary to ${dest}`);
	} catch (err) {
		console.warn('[build] Failed to copy 7z binary:', err);
	}
}

if (prod) {
	await context.rebuild();
	await copy7zBin();
	process.exit(0);
} else {
	await context.watch();
	await copy7zBin();
}
